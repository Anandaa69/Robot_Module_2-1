import robomaster
from robomaster import robot
from robomaster import vision
from robomaster import camera
import time
import cv2

def main():
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö RoboMaster S1
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    
    # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á gimbal ‡πÅ‡∏•‡∏∞ camera
    ep_gimbal = ep_robot.gimbal
    ep_vision = ep_robot.vision
    ep_camera = ep_robot.camera
    
    try:
        print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Gimbal...")
        
        # Step 1: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á gimbal ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        print("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Gimbal...")
        ep_gimbal.recenter().wait_for_completed()
        time.sleep(2)
        
        # Step 2: ‡∏´‡∏°‡∏∏‡∏ô gimbal ‡πÑ‡∏õ -90 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏´‡∏±‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)
        print("‡∏´‡∏°‡∏∏‡∏ô Gimbal ‡πÑ‡∏õ -90 ‡∏≠‡∏á‡∏®‡∏≤...")
        ep_gimbal.moveto(pitch=0, yaw=-90, pitch_speed=0, yaw_speed=50).wait_for_completed()
        time.sleep(2)
        
        # Step 3: ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° vision detection
        print("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker...")
        ep_camera.start_video_stream(display=False, resolution=camera.STREAM_360P)
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker
        ep_vision.sub_detect_info(name="marker", callback=marker_detection_callback)
        
        # Step 4: ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≤‡∏Å -90 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÑ‡∏õ 90 ‡∏≠‡∏á‡∏®‡∏≤
        print("‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≤‡∏Å -90 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÑ‡∏õ 90 ‡∏≠‡∏á‡∏®‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker...")
        
        # ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 10 ‡∏≠‡∏á‡∏®‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker
        current_yaw = -90
        target_yaw = 90
        step = 30  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 10 ‡∏≠‡∏á‡∏®‡∏≤
        
        while current_yaw < target_yaw:
            current_yaw += step
            if current_yaw > target_yaw:
                current_yaw = target_yaw
                
            print(f"‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ {current_yaw} ‡∏≠‡∏á‡∏®‡∏≤...")
            ep_gimbal.moveto(pitch=0, yaw=current_yaw, pitch_speed=0, yaw_speed=30).wait_for_completed()
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            time.sleep(2)
        
        print("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô Gimbal!")
        
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
        time.sleep(5)
        
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        print("‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö...")
        ep_vision.unsub_detect_info(name="marker")
        ep_camera.stop_video_stream()
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï gimbal ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        print("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Gimbal ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°...")
        ep_gimbal.recenter().wait_for_completed()
        
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        ep_robot.close()
        print("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def marker_detection_callback(sub_info):
    """
    Callback function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker
    """
    distance, angle, info = sub_info
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ marker ‡∏£‡∏π‡∏õ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for marker in info:
        marker_id = marker[0]  # ID ‡∏Ç‡∏≠‡∏á marker
        x = marker[1]         # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x
        y = marker[2]         # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á y
        w = marker[3]         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        h = marker[4]         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        
        # RoboMaster S1 ‡πÉ‡∏ä‡πâ marker ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
        # Heart marker ‡∏°‡∏µ ID = 2
        if marker_id == 2:  # Heart marker
            print(f"üß° ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Heart Marker!")
            print(f"   ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ({x}, {y})")
            print(f"   ‡∏Ç‡∏ô‡∏≤‡∏î: {w} x {h}")
            print(f"   ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {distance:.2f}")
            print(f"   ‡∏°‡∏∏‡∏°: {angle:.2f}")
            print("-" * 40)

def advanced_heart_detection():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    """
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    
    ep_gimbal = ep_robot.gimbal
    ep_vision = ep_robot.vision
    ep_camera = ep_robot.camera
    
    try:
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï gimbal
        ep_gimbal.recenter().wait_for_completed()
        time.sleep(1)
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
        ep_camera.start_video_stream(display=True)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ vision detection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö marker
        ep_vision.sub_detect_info(name="marker")
        
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Heart Marker...")
        
        # ‡∏´‡∏°‡∏∏‡∏ô gimbal ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        for angle in range(0, 360, 15):  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 15 ‡∏≠‡∏á‡∏®‡∏≤
            print(f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏° {angle} ‡∏≠‡∏á‡∏®‡∏≤...")
            ep_gimbal.moveto(pitch=0, yaw=angle, pitch_speed=50, yaw_speed=50).wait_for_completed()
            time.sleep(1)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö marker ‡∏ó‡∏µ‡πà‡∏û‡∏ö
            marker_info = ep_vision.get_marker_detection_info()
            if marker_info:
                for marker in marker_info:
                    if marker[0] == 2:  # Heart marker
                        print(f"üß° ‡∏û‡∏ö Heart Marker ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏° {angle} ‡∏≠‡∏á‡∏®‡∏≤!")
                        return True
        
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö Heart Marker")
        return False
        
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False
    
    finally:
        ep_vision.unsub_detect_info(name="marker")
        ep_camera.stop_video_stream()
        ep_gimbal.recenter().wait_for_completed()
        ep_robot.close()

if __name__ == "__main__":
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
    main()
    
    # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    advanced_heart_detection()