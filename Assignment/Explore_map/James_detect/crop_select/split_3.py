import cv2
import robomaster
from robomaster import robot
import time

# --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏Å‡∏•‡∏ö‡∏≠‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
dividers_x = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î X ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á (‡∏Ñ‡πà‡∏≤ x1, x2)
MODE = "DEFINING"  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: "DEFINING" ‡∏´‡∏£‡∏∑‡∏≠ "TESTING"
WINDOW_NAME = "Gimbal Zone Definer"

def mouse_callback(event, x, y, flags, param):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå
    """
    global dividers_x, MODE

    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢
    if event == cv2.EVENT_LBUTTONDOWN:
        if MODE == "DEFINING":
            dividers_x.append(x)
            print(f"‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà {len(dividers_x)} ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î x = {x}")
            
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏£‡∏ö 2 ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            if len(dividers_x) == 2:
                # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
                dividers_x.sort()
                MODE = "TESTING"
                print("-" * 30)
                print("‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ã‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                print(f"   - ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà 1: x = {dividers_x[0]}")
                print(f"   - ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà 2: x = {dividers_x[1]}")
                print("üëâ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ã‡∏ô‡πÑ‡∏´‡∏ô")
                print("-" * 30)
        
        elif MODE == "TESTING":
            x1, x2 = dividers_x[0], dividers_x[1]
            zone = ""
            if x < x1:
                zone = "LEFT"
            elif x1 <= x < x2:
                zone = "CENTER"
            else: # x >= x2
                zone = "RIGHT"
            print(f"üñ±Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î (x={x}) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô: {zone}")

def draw_ui_on_frame(frame):
    """
    ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á, ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ã‡∏ô, ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏•‡∏á‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏†‡∏≤‡∏û
    """
    display_frame = frame.copy()
    height, width, _ = display_frame.shape
    font = cv2.FONT_HERSHEY_SIMPLEX

    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    for x_val in dividers_x:
        cv2.line(display_frame, (x_val, 0), (x_val, height), (0, 255, 255), 2)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (MODE)
    if MODE == "DEFINING":
        instruction = f"Click to set divider {len(dividers_x) + 1}/2"
        cv2.putText(display_frame, instruction, (20, 40), font, 1, (255, 255, 255), 2, cv2.LINE_AA)
    
    elif MODE == "TESTING":
        x1, x2 = dividers_x[0], dividers_x[1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        left_mid = x1 // 2
        center_mid = (x1 + x2) // 2
        right_mid = (x2 + width) // 2

        # ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ã‡∏ô
        cv2.putText(display_frame, "LEFT", (left_mid - 50, 50), font, 1.2, (255, 255, 0), 3)
        cv2.putText(display_frame, "CENTER", (center_mid - 70, 50), font, 1.2, (255, 255, 0), 3)
        cv2.putText(display_frame, "RIGHT", (right_mid - 60, 50), font, 1.2, (255, 255, 0), 3)
        cv2.putText(display_frame, "Zones Defined. Click to test.", (20, 40), font, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    cv2.putText(display_frame, "r: Reset | s: Save Frame | q: Quit", (20, height - 20), font, 0.7, (255, 255, 255), 2, cv2.LINE_AA)
    
    return display_frame

if __name__ == '__main__':
    ep_robot = robot.Robot()
    
    try:
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Robomaster...")
        ep_robot.initialize(conn_type="ap")
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        ep_robot.camera.start_video_stream(display=False, resolution="720p")
        print("üì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
        time.sleep(2) # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á

        cv2.namedWindow(WINDOW_NAME)
        cv2.setMouseCallback(WINDOW_NAME, mouse_callback)
        
        print("\n--- üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ã‡∏ô ---")
        print("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("  1. ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏∂‡πâ‡∏ô")
        print("  2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ö‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á 2 ‡πÄ‡∏™‡πâ‡∏ô")
        print("  3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        print("  4. ‡∏Å‡∏î 'r' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï, 's' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û, 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î")

        while True:
            frame = ep_robot.camera.read_cv2_image(timeout=5)
            if frame is None:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏†‡∏≤‡∏û...")
                time.sleep(0.5)
                continue

            # ‡∏ß‡∏≤‡∏î UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
            display_frame = draw_ui_on_frame(frame)
            
            cv2.imshow(WINDOW_NAME, display_frame)
            key = cv2.waitKey(1) & 0xFF

            # ‡∏Å‡∏î 'q' ‡∏´‡∏£‡∏∑‡∏≠ ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
            if key == ord('q') or key == 27:
                break
            
            # ‡∏Å‡∏î 'r' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            if key == ord('r'):
                print("\nüîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà...")
                dividers_x = []
                MODE = "DEFINING"
            
            # ‡∏Å‡∏î 's' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
            if key == ord('s'):
                filename = f"capture_{int(time.time())}.png"
                cv2.imwrite(filename, frame)
                print(f"\nüì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏õ‡πá‡∏ô '{filename}'")

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    finally:
        if len(dividers_x) == 2:
            print("\n--- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ---")
            print(f"‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠: x1 = {dividers_x[0]} ‡πÅ‡∏•‡∏∞ x2 = {dividers_x[1]}")
            print("‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")

        print("\nüîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        cv2.destroyAllWindows()
        ep_robot.camera.stop_video_stream()
        ep_robot.close()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")