import cv2
import robomaster
from robomaster import robot
import time

# Dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ROI ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏≤‡∏™‡πå
roi_state = {
    'start_point': None,
    'end_point': None,
    'drawing': False,
    'roi_defined': False
}

def select_roi_callback(event, x, y, flags, param):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå"""
    global roi_state

    if event == cv2.EVENT_LBUTTONDOWN:
        roi_state['start_point'] = (x, y)
        roi_state['end_point'] = (x, y)
        roi_state['drawing'] = True
        roi_state['roi_defined'] = False

    elif event == cv2.EVENT_MOUSEMOVE:
        if roi_state['drawing']:
            roi_state['end_point'] = (x, y)

    elif event == cv2.EVENT_LBUTTONUP:
        roi_state['end_point'] = (x, y)
        roi_state['drawing'] = False
        roi_state['roi_defined'] = True

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    ep_robot = robot.Robot()
    final_roi = None

    try:
        # --- 1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå ---
        print("ü§ñ Attempting to connect to Robomaster...")
        # (‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö Station Mode ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô conn_type="sta")
        ep_robot.initialize(conn_type="ap")
        print("‚úÖ Connection successful!")

        # --- 2. ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á ---
        # display=False ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ cv2.imshow
        ep_robot.camera.start_video_stream(display=False, resolution='720p')
        print("üì∑ Gimbal camera stream is ON.")
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏¥‡πà‡∏á
        time.sleep(1)

        window_name = "Gimbal ROI Selector"
        cv2.namedWindow(window_name)
        cv2.setMouseCallback(window_name, select_roi_callback)

        print("\nINSTRUCTIONS:")
        print("  - Drag the mouse on the video feed to draw a rectangle.")
        print("  - Press 'c' to confirm the selection and get coordinates.")
        print("  - Press 'r' to reset the selection.")
        print("  - Press 'q' to quit.")

        # --- 3. ‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ROI ---
        while True:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
            frame = ep_robot.camera.read_cv2_image(timeout=2)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏° ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            if frame is None:
                continue

            clone = frame.copy()

            # ‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ROI ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            if roi_state['start_point'] and roi_state['end_point']:
                cv2.rectangle(clone, roi_state['start_point'], roi_state['end_point'], (0, 255, 0), 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            cv2.imshow(window_name, clone)
            key = cv2.waitKey(1) & 0xFF

            if key == ord('q'):
                print("\nQuitting program.")
                break
            
            elif key == ord('r'):
                print("Selection reset. Please draw a new ROI.")
                roi_state['start_point'] = None
                roi_state['end_point'] = None
                roi_state['roi_defined'] = False

            elif key == ord('c'):
                if roi_state['roi_defined']:
                    x1, y1 = roi_state['start_point']
                    x2, y2 = roi_state['end_point']
                    
                    x = min(x1, x2)
                    y = min(y1, y2)
                    w = abs(x1 - x2)
                    h = abs(y1 - y2)

                    if w > 0 and h > 0:
                        final_roi = (x, y, w, h)
                        print("\n" + "="*40)
                        print(f"‚úÖ ROI Confirmed!")
                        print(f"   - Pixel Coordinates (x, y, w, h): {final_roi}")
                        print("="*40)
                        break # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    else:
                        print("‚ö†Ô∏è Invalid ROI. Please draw a box with size.")
                        roi_state['roi_defined'] = False
                else:
                    print("‚ö†Ô∏è No ROI has been drawn yet. Please draw a box first.")

    except Exception as e:
        print(f"‚ùå An error occurred: {e}")

    finally:
        # --- 4. ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ ---
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏à‡∏ö‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
        print("\nüîå Shutting down and cleaning up resources...")
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ep_robot ‡∏ñ‡∏π‡∏Å initialize ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if ep_robot._is_initialized:
                ep_robot.camera.stop_video_stream()
                ep_robot.close()
                print("‚úÖ Robot connection closed.")
        except Exception as e:
            print(f"   (Note) Error during cleanup, but continuing: {e}")
        
        cv2.destroyAllWindows()
        print("‚úÖ Program finished.")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if __name__ == '__main__':
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á robomaster ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    try:
        import robomaster
    except ImportError:
        print("\nError: robomaster library not found.")
        print("Please install it using: pip install robomaster")
        
    main()