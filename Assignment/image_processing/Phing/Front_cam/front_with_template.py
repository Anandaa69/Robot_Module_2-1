import cv2
import numpy as np
import sys

# ======================================================================
# ‡∏Ñ‡∏•‡∏≤‡∏™ ObjectDetector ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Template Matching
# ======================================================================
class ObjectDetector:
    def __init__(self, template_paths):
        """
        Constructor ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™, ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û Template ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        """
        print("üñºÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û Templates...")
        self.templates = self._load_templates(template_paths)
        if not self.templates:
            # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î template ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Template ‡πÑ‡∏î‡πâ, ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            sys.exit(1) # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î Templates ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {list(self.templates.keys())}")


    def _load_templates(self, template_paths):
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û template, ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale, ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á contour ‡∏´‡∏•‡∏±‡∏Å
        """
        processed_templates = {}
        for shape_name, path in template_paths.items():
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û template ‡πÅ‡∏ö‡∏ö grayscale
            template_img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
            if template_img is None:
                print(f"‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå template ‡∏ó‡∏µ‡πà: {path}")
                continue
            
            # ‡∏´‡∏≤ contours ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡πÉ‡∏ô template
            # ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û template ‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏≥
            contours, _ = cv2.findContours(template_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            if contours:
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å contour ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á template
                template_contour = max(contours, key=cv2.contourArea)
                processed_templates[shape_name] = template_contour
        
        return processed_templates

    def detect(self, frame):
        frame = cv2.flip(frame, 1)
        output = frame.copy()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # ‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        lower_green = np.array([40, 50, 50])
        upper_green = np.array([90, 255, 255])
        lower_blue = np.array([95, 80, 80])
        upper_blue = np.array([130, 255, 255])

        mask_green = cv2.inRange(hsv, lower_green, upper_green)
        mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
        combined_mask = cv2.bitwise_or(mask_green, mask_blue)

        contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for cnt in contours:
            area = cv2.contourArea(cnt)
            if area < 1000:
                continue

            # --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡∏î‡πâ‡∏ß‡∏¢ Template Matching ---
            best_match_score = float('inf') # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å‡πÜ
            best_match_shape = "Unknown"

            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö contour ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (cnt) ‡∏Å‡∏±‡∏ö contour ‡∏Ç‡∏≠‡∏á template ‡∏ó‡∏∏‡∏Å‡∏≠‡∏±‡∏ô
            for shape_name, template_cnt in self.templates.items():
                # cv2.matchShapes ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á" ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á
                # ‡∏Ñ‡πà‡∏≤‡∏¢‡∏¥‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
                score = cv2.matchShapes(cnt, template_cnt, cv2.CONTOURS_MATCH_I1, 0.0)
                
                if score < best_match_score:
                    best_match_score = score
                    best_match_shape = shape_name

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå (threshold) ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡∏ô‡∏±‡πâ‡∏ô
            # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤ 0.4 ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏∞‡∏´‡∏•‡∏ß‡∏°‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏•‡∏î
            match_threshold = 0.4 
            if best_match_score < match_threshold:
                shape = best_match_shape
            else:
                shape = "Unknown"

            if shape != "Unknown":
                # --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
                mask = np.zeros(frame.shape[:2], dtype="uint8")
                cv2.drawContours(mask, [cnt], -1, 255, -1)
                
                if cv2.mean(mask_green, mask=mask)[0] > 1:
                    color = "Green"
                else:
                    color = "Blue"

                # --- ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
                x, y, w, h = cv2.boundingRect(cnt)
                cv2.drawContours(output, [cnt], -1, (0, 255, 0), 3)
                cv2.putText(output, f"{shape}, {color} (Score: {best_match_score:.2f})", 
                            (x, y - 15), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

        return output

# ======================================================================
# Main (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°)
# ======================================================================
if __name__ == '__main__':
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå template
    template_files = {
        "Circle": "./Assignment/image_processing/templ/circle.jpg",
        "Square": "./Assignment/image_processing/templ/rectangle.jpg",
        "Triangle": "./Assignment/image_processing/templ/triangle.jpg"
    }

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á detector ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á path ‡∏Ç‡∏≠‡∏á templates ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    detector = ObjectDetector(template_paths=template_files)

    print("\nüíª ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°...")
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡πÑ‡∏î‡πâ")
        exit()

    print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à. ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    
    try:
        while True:
            ret, frame = cap.read()
            if not ret or frame is None:
                break

            processed_frame = detector.detect(frame)
            cv2.imshow('Live Webcam Feed - Press "q" to exit', processed_frame)

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
    finally:
        cap.release()
        cv2.destroyAllWindows()
        print("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")