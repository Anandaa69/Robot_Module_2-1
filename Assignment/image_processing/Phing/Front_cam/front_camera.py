import cv2
import numpy as np

# ======================================================================
# ‡∏Ñ‡∏•‡∏≤‡∏™ ObjectDetector ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
# ======================================================================
class ObjectDetector:
    def detect(self, frame):
        # ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏Å) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        frame = cv2.flip(frame, 1)
        output = frame.copy()

        # 1. ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û BGR ‡πÄ‡∏õ‡πá‡∏ô HSV color space
        # HSV ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏™‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ BGR ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡πÄ‡∏ó‡πà‡∏≤
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á "‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" ‡πÅ‡∏•‡∏∞ "‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö HSV
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏π‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∑‡∏≠ [Hue (‡∏™‡∏µ), Saturation (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î), Value (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á)]
        lower_green = np.array([40, 50, 50])
        upper_green = np.array([90, 255, 255])

        lower_blue = np.array([95, 80, 80])
        upper_blue = np.array([130, 255, 255])

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Mask: ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß-‡∏î‡∏≥ ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à
        mask_green = cv2.inRange(hsv, lower_green, upper_green)
        mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)

        # ‡∏£‡∏ß‡∏° mask ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        combined_mask = cv2.bitwise_or(mask_green, mask_blue)

        # 4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Contours (‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏£‡∏π‡∏õ) ‡∏à‡∏≤‡∏Å Mask ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å "‡∏´‡∏¢‡πà‡∏≠‡∏°‡∏™‡∏µ" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏†‡∏≤‡∏û
        contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # 5. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ Contour ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        for cnt in contours:
            area = cv2.contourArea(cnt)
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å
            if area < 1000:
                continue

            # --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á ---
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.03 * peri, True)
            num_vertices = len(approx)

            shape = "Unknown"
            if num_vertices == 3:
                shape = "Triangle"
            elif num_vertices == 4:
                # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì aspect ratio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™/‡∏ú‡∏∑‡∏ô‡∏ú‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏∑‡∏≠‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                shape = "Square"
            else:
                # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏±‡∏î "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°" (Circularity) ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏∏‡∏î
                # ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1
                circularity = (4 * np.pi * area) / (peri ** 2)
                if circularity > 0.80:
                    shape = "Circle"

            if shape != "Unknown":
                # --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏µ ---
                # ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏π‡πâ‡∏™‡∏µ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ß‡πà‡∏≤ contour ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å mask ‡∏™‡∏µ‡∏≠‡∏∞‡πÑ‡∏£
                # ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà contour ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
                mask = np.zeros(frame.shape[:2], dtype="uint8")
                cv2.drawContours(mask, [cnt], -1, 255, -1)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô mask ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô
                if cv2.mean(mask_green, mask=mask)[0] > 1:
                    color = "Green"
                elif cv2.mean(mask_blue, mask=mask)[0] > 1:
                    color = "Blue"
                else:
                    color = "Unknown"

                # --- ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
                x, y, w, h = cv2.boundingRect(approx)
                cv2.drawContours(output, [approx], -1, (0, 255, 0), 3)
                cv2.putText(output, f"{shape}, {color}", (x, y - 15),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

        return output

# ======================================================================
# Main (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°)
# ======================================================================
if __name__ == '__main__':
    print("üíª ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°...")
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡πÑ‡∏î‡πâ")
        exit()

    print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à. ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    detector = ObjectDetector()

    try:
        while True:
            ret, frame = cap.read()
            if not ret or frame is None:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                break

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô detect ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
            processed_frame = detector.detect(frame)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            cv2.imshow('Live Webcam Feed - Press "q" to exit', processed_frame)

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                print("...‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
    finally:
        cap.release()
        cv2.destroyAllWindows()
        print("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")