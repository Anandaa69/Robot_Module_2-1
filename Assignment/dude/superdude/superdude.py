# -*-coding:utf-8-*-

import time
import robomaster
from robomaster import robot, camera as r_camera, blaster as r_blaster
import numpy as np
import math
import json
import matplotlib.pyplot as plt
from collections import deque
import traceback
import statistics
import os
import cv2
import threading
import queue

# =============================================================================
# ===== CONFIGURATION & PARAMETERS ============================================
# =============================================================================
SPEED_ROTATE = 480

# --- NEW: Resume Function Variables ---
RESUME_MODE = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î resume ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
DATA_FOLDER = r"D:\downsyndrome\year2_1\Robot_Module_2-1\Assignment\dude\superdude"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏ò‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
MAP_FILE = os.path.join(DATA_FOLDER, "Mapping_Top.json")
POS_FILE = os.path.join(DATA_FOLDER, "Robot_Position_Timestamps.json")
OBJ_FILE = os.path.join(DATA_FOLDER, "Detected_Objects.json")

# --- PID Target Tracking & Firing Configuration ---
TARGET_SHAPE = "Circle"  # Shape to track
TARGET_COLOR = "Red"     # Color to track
FIRE_SHOTS_COUNT = 5     # Number of shots to fire (adjustable global variable)

# PID Parameters (from fire_target.py)
PID_KP = -0.25
PID_KI = -0.01
PID_KD = -0.03
DERIV_LPF_ALPHA = 0.25
MAX_YAW_SPEED = 220
MAX_PITCH_SPEED = 180
I_CLAMP = 2000.0
PIX_ERR_DEADZONE = 6
LOCK_TOL_X = 8
LOCK_TOL_Y = 8
LOCK_STABLE_COUNT = 6

# Camera Configuration
FRAME_W, FRAME_H = 960, 540
VERTICAL_FOV_DEG = 54.0
PIXELS_PER_DEG_V = FRAME_H / VERTICAL_FOV_DEG
PITCH_BIAS_DEG = 2.5
PITCH_BIAS_PIX = +PITCH_BIAS_DEG * PIXELS_PER_DEG_V

# ROI Configuration
ROI_Y0, ROI_H0, ROI_X0, ROI_W0 = 264, 270, 10, 911
ROI_SHIFT_PER_DEG = 6.0
ROI_Y_MIN, ROI_Y_MAX = 0, FRAME_H - 10

# --- Sharp Distance Sensor Configuration ---
LEFT_SHARP_SENSOR_ID = 1
LEFT_SHARP_SENSOR_PORT = 1
LEFT_TARGET_CM = 13.0

RIGHT_SHARP_SENSOR_ID = 2
RIGHT_SHARP_SENSOR_PORT = 1
RIGHT_TARGET_CM = 13.0

# --- IR Sensor Configuration ---
LEFT_IR_SENSOR_ID = 1
LEFT_IR_SENSOR_PORT = 2
RIGHT_IR_SENSOR_ID = 2
RIGHT_IR_SENSOR_PORT = 2

# --- Sharp Sensor Detection Thresholds ---
SHARP_WALL_THRESHOLD_CM = 60.0  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠‡∏ú‡∏ô‡∏±‡∏á
SHARP_STDEV_THRESHOLD = 0.3    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡∏ß‡πà‡∏á

# --- ToF Centering Configuration (from dude_kum.py) ---
TOF_ADJUST_SPEED = 0.1             # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤/‡∏ñ‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î
TOF_CALIBRATION_SLOPE = 0.0894     # ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Calibrate
TOF_CALIBRATION_Y_INTERCEPT = 3.8409 # ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ Calibrate
TOF_TIME_CHECK = 0.15

GRID = 5

# --- Logical state for the grid map (from map_suay.py) ---
CURRENT_POSITION = (4,0)  # (‡πÅ‡∏ñ‡∏ß, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) here
CURRENT_DIRECTION =  1  # 0:North, 1:East, 2:South, 3:West here
TARGET_DESTINATION =CURRENT_POSITION #(1, 0)#here

# --- Physical state for the robot ---
CURRENT_TARGET_YAW = 0.0
ROBOT_FACE = 1  # 1,3,5.. = X axis, 2,4,6.. = Y axis

# --- Global variables for PID tracking and firing ---
is_tracking_mode = False
fired_targets = set()  # Track which targets have been fired at
current_target_id = None
shots_fired = 0
targets_found = []  # List of targets found in current detection
gimbal_angle_lock = threading.Lock()
gimbal_angles = (0.0, 0.0, 0.0, 0.0)  # (pitch, yaw, pitch_g, yaw_g)

# --- NEW: IMU Drift Compensation Parameters ---
IMU_COMPENSATION_START_NODE_COUNT = 7      # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏´‡∏ô‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡∏î‡πÄ‡∏ä‡∏¢
IMU_COMPENSATION_NODE_INTERVAL = 15      # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏ó‡∏∏‡∏Å‡πÜ N ‡πÇ‡∏´‡∏ô‡∏î
IMU_COMPENSATION_DEG_PER_INTERVAL = -1.0 # ‡∏Ñ‡πà‡∏≤‡∏≠‡∏á‡∏®‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏î‡πÄ‡∏ä‡∏¢ (‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤)
IMU_DRIFT_COMPENSATION_DEG = 0.0           # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

# --- Occupancy Grid Parameters ---
PROB_OCC_GIVEN_OCC = {'tof': 0.95, 'sharp': 0.90} # ‡πÄ‡∏û‡∏¥‡πà‡∏° 'sharp'
PROB_OCC_GIVEN_FREE = {'tof': 0.05, 'sharp': 0.10} # ‡πÄ‡∏û‡∏¥‡πà‡∏° 'sharp'

LOG_ODDS_OCC = {
    'tof': math.log(PROB_OCC_GIVEN_OCC['tof'] / (1 - PROB_OCC_GIVEN_OCC['tof'])),
    'sharp': math.log(PROB_OCC_GIVEN_OCC['sharp'] / (1 - PROB_OCC_GIVEN_OCC['sharp']))
}
LOG_ODDS_FREE = {
    'tof': math.log(PROB_OCC_GIVEN_FREE['tof'] / (1 - PROB_OCC_GIVEN_FREE['tof'])),
    'sharp': math.log(PROB_OCC_GIVEN_FREE['sharp'] / (1 - PROB_OCC_GIVEN_FREE['sharp']))
}

# --- Decision Thresholds ---
OCCUPANCY_THRESHOLD = 0.7
FREE_THRESHOLD = 0.3

# --- Visualization Configuration ---
MAP_FIGURE_SIZE = (6, 4)  # (width, height) ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

# --- NEW: Timestamp Logging ---
POSITION_LOG = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤

def save_all_data(occupancy_map):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Map, Timestamps, Objects) ‡∏•‡∏á JSON"""
    try:
        print("üíæ Saving map and timestamp data...")
        
        # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° objects
        final_map_data = {'nodes': []}
        for r in range(occupancy_map.height):
            for c in range(occupancy_map.width):
                cell = occupancy_map.grid[r][c]
                cell_data = {
                    "coordinate": {"row": r, "col": c},
                    "probability": round(cell.get_node_probability(), 3),
                    "is_occupied": cell.is_node_occupied(),
                    "walls": {
                        "north": cell.walls['N'].is_occupied(),
                        "south": cell.walls['S'].is_occupied(),
                        "east": cell.walls['E'].is_occupied(),
                        "west": cell.walls['W'].is_occupied()
                    },
                    "wall_probabilities": {
                        "north": round(cell.walls['N'].get_probability(), 3),
                        "south": round(cell.walls['S'].get_probability(), 3),
                        "east": round(cell.walls['E'].get_probability(), 3),
                        "west": round(cell.walls['W'].get_probability(), 3)
                    },
                    "objects": cell.objects if hasattr(cell, 'objects') else []
                }
                final_map_data["nodes"].append(cell_data)

        with open(MAP_FILE, "w") as f:
            json.dump(final_map_data, f, indent=2)
        print(f"‚úÖ Final Hybrid Belief Map (with objects) saved to {MAP_FILE}")
        
        # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timestamp ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        timestamp_data = {
            "session_info": {
                "start_time": POSITION_LOG[0]["iso_timestamp"] if POSITION_LOG else "N/A",
                "end_time": POSITION_LOG[-1]["iso_timestamp"] if POSITION_LOG else "N/A",
                "total_positions_logged": len(POSITION_LOG),
                "grid_size": f"{occupancy_map.height}x{occupancy_map.width}",
                "target_destination": list(TARGET_DESTINATION),
                "interrupted": not RESUME_MODE
            },
            "position_log": POSITION_LOG
        }
        
        with open(POS_FILE, "w") as f:
            json.dump(timestamp_data, f, indent=2)
        print(f"‚úÖ Robot position timestamps saved to {POS_FILE}")
        
        # 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å map)
        all_detected_objects = []
        for r in range(occupancy_map.height):
            for c in range(occupancy_map.width):
                cell = occupancy_map.grid[r][c]
                if hasattr(cell, 'objects') and cell.objects:
                    for obj in cell.objects:
                        obj_with_pos = obj.copy()
                        obj_with_pos['cell_position'] = {'row': r, 'col': c}
                        all_detected_objects.append(obj_with_pos)
        
        objects_data = {
            "session_info": {
                "total_objects_detected": len(all_detected_objects),
                "detection_timestamp": time.time(),
                "grid_size": f"{occupancy_map.height}x{occupancy_map.width}"
            },
            "detected_objects": all_detected_objects
        }
        
        with open(OBJ_FILE, "w") as f:
            json.dump(objects_data, f, indent=2)
        print(f"‚úÖ Detected objects saved to {OBJ_FILE} (Total: {len(all_detected_objects)} objects)")
        
        return True
    except Exception as save_error:
        print(f"‚ùå Error saving data: {save_error}")
        traceback.print_exc()
        return False

# =============================================================================
# ===== NEW: FAST RESUME SYSTEM ===============================================
# =============================================================================

def check_for_resume_data():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resume ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    return os.path.exists(MAP_FILE) and os.path.exists(POS_FILE)

def load_resume_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠ resume ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    global CURRENT_POSITION, CURRENT_DIRECTION, CURRENT_TARGET_YAW, ROBOT_FACE, IMU_DRIFT_COMPENSATION_DEG, POSITION_LOG, RESUME_MODE
    
    try:
        print("üîÑ Loading resume data...")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timestamp
        with open(POS_FILE, "r", encoding="utf-8") as f:
            timestamp_data = json.load(f)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ global variables ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timestamp
        if timestamp_data["position_log"]:
            last_log = timestamp_data["position_log"][-1]
            CURRENT_POSITION = tuple(last_log["position"])
            CURRENT_TARGET_YAW = last_log["yaw_angle"]
            IMU_DRIFT_COMPENSATION_DEG = last_log["imu_compensation"]
            POSITION_LOG = timestamp_data["position_log"]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì direction ‡∏à‡∏≤‡∏Å yaw angle
            yaw = last_log["yaw_angle"]
            if -45 <= yaw <= 45:
                CURRENT_DIRECTION = 0  # North
                ROBOT_FACE = 1
            elif 45 < yaw <= 135:
                CURRENT_DIRECTION = 1  # East
                ROBOT_FACE = 2
            elif 135 < yaw or yaw <= -135:
                CURRENT_DIRECTION = 2  # South
                ROBOT_FACE = 3
            else:
                CURRENT_DIRECTION = 3  # West
                ROBOT_FACE = 4
        
        print(f"‚úÖ Resume data loaded:")
        print(f"   Position: {CURRENT_POSITION}")
        print(f"   Direction: {['North', 'East', 'South', 'West'][CURRENT_DIRECTION]}")
        print(f"   Yaw: {CURRENT_TARGET_YAW:.1f}¬∞")
        print(f"   IMU Compensation: {IMU_DRIFT_COMPENSATION_DEG:.1f}¬∞")
        print(f"   Previous positions logged: {len(POSITION_LOG)}")
        
        RESUME_MODE = True
        return True
        
    except Exception as e:
        print(f"‚ùå Error loading resume data: {e}")
        return False

def create_occupancy_map_from_json():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á OccupancyGridMap ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        with open(MAP_FILE, "r", encoding="utf-8") as f:
            map_data = json.load(f)
        
        # ‡∏´‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
        max_row = max(node['coordinate']['row'] for node in map_data['nodes'])
        max_col = max(node['coordinate']['col'] for node in map_data['nodes'])
        width = max_col + 1
        height = max_row + 1
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á OccupancyGridMap
        occupancy_map = OccupancyGridMap(width, height)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô occupancy_map
        for node_data in map_data['nodes']:
            r = node_data['coordinate']['row']
            c = node_data['coordinate']['col']
            cell = occupancy_map.grid[r][c]
            
            # ‡πÇ‡∏´‡∏•‡∏î node probability
            cell.log_odds_occupied = math.log(node_data['probability'] / (1 - node_data['probability'])) if node_data['probability'] != 0.5 else 0
            
            # ‡πÇ‡∏´‡∏•‡∏î wall probabilities
            walls = node_data['wall_probabilities']
            for direction, prob in walls.items():
                if direction == 'north':
                    cell.walls['N'].log_odds = math.log(prob / (1 - prob)) if prob != 0.5 else 0
                elif direction == 'south':
                    cell.walls['S'].log_odds = math.log(prob / (1 - prob)) if prob != 0.5 else 0
                elif direction == 'east':
                    cell.walls['E'].log_odds = math.log(prob / (1 - prob)) if prob != 0.5 else 0
                elif direction == 'west':
                    cell.walls['W'].log_odds = math.log(prob / (1 - prob)) if prob != 0.5 else 0
            
            # ‡πÇ‡∏´‡∏•‡∏î objects
            if 'objects' in node_data and node_data['objects']:
                cell.objects = node_data['objects']
        
        print(f"‚úÖ Occupancy map loaded from JSON ({width}x{height})")
        return occupancy_map
        
    except Exception as e:
        print(f"‚ùå Error loading occupancy map: {e}")
        return None

def fast_navigate_to_last_position(movement_controller, attitude_handler, scanner, occupancy_map, visualizer):
    """‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"""
    global CURRENT_POSITION, CURRENT_DIRECTION
    
    if not RESUME_MODE:
        return True
    
    print("\nüöÄ FAST NAVIGATION: Moving to last known position...")
    
    # ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    start_pos = (4, 0)  # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    target_pos = CURRENT_POSITION
    
    if start_pos == target_pos:
        print("‚úÖ Already at target position")
        return True
    
    path = find_path_bfs(occupancy_map, start_pos, target_pos)
    if not path:
        print("‚ùå No path found to last position")
        return False
    
    print(f"üìç Fast path: {path}")
    
    # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ã‡πâ‡∏≥
    for i in range(len(path) - 1):
        current = path[i]
        next_pos = path[i + 1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô
        dr = next_pos[0] - current[0]
        dc = next_pos[1] - current[1]
        
        dir_vectors_map = {(-1, 0): 0, (0, 1): 1, (1, 0): 2, (0, -1): 3}
        target_direction = dir_vectors_map[(dr, dc)]
        
        # ‡∏´‡∏°‡∏∏‡∏ô‡∏´‡∏∏‡πà‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        movement_controller.rotate_to_direction(target_direction, attitude_handler, scanner)
        
        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏ô‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á)
        axis_to_monitor = 'x' if ROBOT_FACE % 2 != 0 else 'y'
        movement_controller.move_forward_one_grid(axis=axis_to_monitor, attitude_handler=attitude_handler)
        
        # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÇ‡∏´‡∏ô‡∏î
        movement_controller.center_in_node_with_tof(scanner, attitude_handler)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        CURRENT_POSITION = next_pos
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        log_position_timestamp(CURRENT_POSITION, CURRENT_DIRECTION, "fast_navigation")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó visualization
        visualizer.update_plot(occupancy_map, CURRENT_POSITION, path)
        
        print(f"‚úÖ Moved to {CURRENT_POSITION}")
    
    print("üéâ FAST NAVIGATION COMPLETE!")
    return True

# =============================================================================
# ===== MODIFIED HELPER FUNCTIONS =============================================
# =============================================================================

def log_position_timestamp(position, direction, action="arrived"):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timestamp ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå"""
    global POSITION_LOG
    timestamp = time.time()
    direction_names = ['North', 'East', 'South', 'West']
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ISO timestamp
    dt = time.gmtime(timestamp)
    microseconds = int((timestamp % 1) * 1000000)
    iso_timestamp = time.strftime("%Y-%m-%dT%H:%M:%S", dt) + f".{microseconds:06d}Z"
    
    log_entry = {
        "timestamp": timestamp,
        "iso_timestamp": iso_timestamp,
        "position": list(position),
        "direction": direction_names[direction],
        "action": action,
        "yaw_angle": CURRENT_TARGET_YAW,
        "imu_compensation": IMU_DRIFT_COMPENSATION_DEG
    }
    
    POSITION_LOG.append(log_entry)
    print(f"üìç [{action}] Position: {position}, Direction: {direction_names[direction]}, Time: {log_entry['iso_timestamp']}")

# =============================================================================
# ===== MODIFIED MAIN EXECUTION BLOCK =========================================
# =============================================================================

if __name__ == '__main__':
    ep_robot = None
    occupancy_map = None
    attitude_handler = AttitudeHandler()
    movement_controller = None
    scanner = None
    ep_chassis = None
    
    # --- NEW: Resume Logic ---
    if check_for_resume_data():
        print("\nüîÑ Found previous session data!")
        user_input = input("Do you want to resume from previous session? (y/n): ").lower().strip()
        
        if user_input == 'y' or user_input == 'yes':
            print("üîÑ Resuming from previous session...")
            if load_resume_data():
                occupancy_map = create_occupancy_map_from_json()
                if occupancy_map is None:
                    print("‚ùå Failed to load occupancy map. Starting fresh session.")
                    occupancy_map = OccupancyGridMap(width=GRID, height=GRID)
                    RESUME_MODE = False
                else:
                    # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• resume
                    RESUME_MODE = True
            else:
                print("‚ùå Failed to load resume data. Starting fresh session.")
                occupancy_map = OccupancyGridMap(width=GRID, height=GRID)
                RESUME_MODE = False
        else:
            print("üÜï Starting fresh session...")
            occupancy_map = OccupancyGridMap(width=GRID, height=GRID)
            RESUME_MODE = False
    else:
        print("üÜï No previous session found. Starting fresh session...")
        occupancy_map = OccupancyGridMap(width=GRID, height=GRID)
        RESUME_MODE = False
    
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)

    try:
        visualizer = RealTimeVisualizer(grid_size=GRID, target_dest=TARGET_DESTINATION)
        
        # +++ NEW CODE: ‡∏£‡∏≠‡πÉ‡∏´‡πâ manager ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô +++
        print("ü§ñ Waiting for robot connection from manager...")
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ manager ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô (timeout 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        if not manager.connected.wait(timeout=15.0):
            print("‚ùå CRITICAL: Robot connection failed to establish via manager. Exiting.")
            # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ cleanup ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            stop_event.set()
            if ep_robot: ep_robot.close()
            exit()

        print("‚úÖ Robot connected via manager.")
        ep_robot = manager.get_robot() # <-- ‡∏î‡∏∂‡∏á instance ‡∏Ç‡∏≠‡∏á robot ‡∏°‡∏≤‡∏à‡∏≤‡∏Å manager
        if ep_robot is None:
            print("‚ùå CRITICAL: Failed to get robot instance from manager. Exiting.")
            stop_event.set()
            exit()
        # +++ END OF NEW CODE +++

        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á initialize ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ manager ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
        ep_chassis, ep_gimbal = ep_robot.chassis, ep_robot.gimbal
        ep_tof_sensor, ep_sensor_adaptor = ep_robot.sensor, ep_robot.sensor_adaptor
        
        print(" GIMBAL: Centering gimbal...")
        try:
            ep_gimbal.moveto(pitch=0, yaw=0, yaw_speed=SPEED_ROTATE).wait_for_completed()
            time.sleep(0.5)  # Wait for gimbal to center
        except Exception as e:
            print(f"‚ö†Ô∏è Gimbal centering error: {e}")
            print("üîÑ Continuing without gimbal centering...")
        
        scanner = EnvironmentScanner(ep_sensor_adaptor, ep_tof_sensor, ep_gimbal, ep_chassis)
        movement_controller = MovementController(ep_chassis)
        attitude_handler.start_monitoring(ep_chassis)
        
        # --- NEW: FAST NAVIGATION TO LAST POSITION ---
        if RESUME_MODE:
            print("üîÑ Fast navigating to last position...")
            success = fast_navigate_to_last_position(movement_controller, attitude_handler, scanner, occupancy_map, visualizer)
            if success:
                print("‚úÖ Successfully reached last position. Resuming exploration...")
                log_position_timestamp(CURRENT_POSITION, CURRENT_DIRECTION, "resume_session")
            else:
                print("‚ùå Fast navigation failed. Starting from initial position.")
                CURRENT_POSITION = (4, 0)
                CURRENT_DIRECTION = 1
                log_position_timestamp(CURRENT_POSITION, CURRENT_DIRECTION, "fresh_start_after_failed_resume")
        else:
            print("üÜï Starting new exploration...")
            log_position_timestamp(CURRENT_POSITION, CURRENT_DIRECTION, "new_session_start")
        
        # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à)
        
    except KeyboardInterrupt: 
        print("\n‚ö†Ô∏è User interrupted exploration.")
        print("üíæ Saving data before exit...")
        if occupancy_map:
            save_all_data(occupancy_map)
    except Exception as e: 
        print(f"\n‚öå An error occurred: {e}")
        traceback.print_exc()
        print("üíæ Saving data before exit...")
        if occupancy_map:
            save_all_data(occupancy_map)