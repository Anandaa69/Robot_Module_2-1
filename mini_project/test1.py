# ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå Robomaster ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï
# ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ "‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Ç‡∏ß‡∏≤" (Right-Hand Rule)

from robomaster import robot
import time
import random

# =========================================================================
# ‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
# ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô Lidar ‡∏´‡∏£‡∏∑‡∏≠ IR sensor)
# =========================================================================
class MockSensors:
    def __init__(self):
        # ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡πÅ‡∏û‡∏á (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡πÄ‡∏°‡∏ï‡∏£)
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.distance_front = 1.0
        self.distance_right = 0.3
        self.distance_left = 1.0
        self.maze_solved = False

    def update_sensors(self, current_pos):
        """
        ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÜ
        """
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        if current_pos > 5.0:  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 5 ‡πÄ‡∏°‡∏ï‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
            self.maze_solved = True
            print("üéâ ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!")
            return

        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
        # ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÉ‡∏ô‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ:
        # ‡∏ñ‡πâ‡∏≤‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ ‡∏à‡∏∞‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏∂‡πâ‡∏ô
        self.distance_front = random.uniform(0.1, 2.0)
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Ç‡∏ß‡∏≤ ‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏à‡∏∞‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        self.distance_right = random.uniform(0.2, 0.4)
        self.distance_left = random.uniform(0.5, 2.0)


# =========================================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï
# =========================================================================
def navigate_maze(ep_chassis):
    """
    ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á
    """
    sensors = MockSensors()
    maze_solved = False
    current_distance = 0.0
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
    forward_speed = 0.5  # m/s
    rotate_speed = 30    # deg/s

    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï ===")
    print("‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Ç‡∏ß‡∏≤")
    
    try:
        while not sensors.maze_solved:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á
            sensors.update_sensors(current_distance)
            
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏¥‡∏î‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Ç‡∏ß‡∏≤
            
            # 1. ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á > 0.4 ‡πÄ‡∏°‡∏ï‡∏£) ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤
            if sensors.distance_right > 0.4:
                print("‡πÄ‡∏à‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ -> ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤")
                ep_chassis.drive_speed(x=0, y=0, z=-rotate_speed, timeout=1.5) # ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
                time.sleep(1.5)
            
            # 2. ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡∏¥‡∏î (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á > 0.5 ‡πÄ‡∏°‡∏ï‡∏£) ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ
            elif sensors.distance_front > 0.5:
                print("‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á -> ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ")
                ep_chassis.drive_speed(x=forward_speed, y=0, z=0, timeout=1.0)
                time.sleep(1.0)
                current_distance += forward_speed * 1.0
            
            # 3. ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢
            elif sensors.distance_left > 0.4:
                print("‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô -> ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢")
                ep_chassis.drive_speed(x=0, y=0, z=rotate_speed, timeout=1.5) # ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
                time.sleep(1.5)
            
            # 4. ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            else:
                print("‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á -> ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á")
                ep_chassis.drive_speed(x=0, y=0, z=rotate_speed * 2, timeout=3.0) # ‡∏´‡∏°‡∏∏‡∏ô 180 ‡∏≠‡∏á‡∏®‡∏≤
                time.sleep(3.0)
                
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏π‡πà
            ep_chassis.drive_speed(x=0, y=0, z=0)
            time.sleep(0.5)

        print("=== ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ===")

    except KeyboardInterrupt:
        print("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        ep_chassis.drive_speed(x=0, y=0, z=0)
    
# =========================================================================
# ‡∏ö‡∏•‡πá‡∏≠‡∏Å Main ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
# =========================================================================
if __name__ == '__main__':
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    ep_chassis = ep_robot.chassis
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
        navigate_maze(ep_chassis)
        
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        ep_robot.close()
        print("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")