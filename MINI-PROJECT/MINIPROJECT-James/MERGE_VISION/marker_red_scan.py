import cv2
import time
import robomaster
from robomaster import robot, vision
from datetime import datetime
import numpy as np
from scipy.ndimage import median_filter

# ===== Marker Detection Classes =====
class MarkerInfo:
    def __init__(self, x, y, w, h, marker_id):
        self._x = x
        self._y = y
        self._w = w
        self._h = h
        self._id = marker_id

    @property
    def id(self):
        return self._id

class MarkerVisionHandler:
    def __init__(self):
        self.markers = []
        self.marker_detected = False
        self.is_active = False
        self.detection_timeout = 1.0
    
    def on_detect_marker(self, marker_info):
        if not self.is_active:
            return
            
        if len(marker_info) > 0:
            valid_markers = []
            for i in range(len(marker_info)):
                x, y, w, h, marker_id = marker_info[i]
                marker = MarkerInfo(x, y, w, h, marker_id)
                valid_markers.append(marker)
            
            if valid_markers:
                self.marker_detected = True
                self.markers = valid_markers
    
    def wait_for_markers(self, timeout=None):
        if timeout is None:
            timeout = self.detection_timeout
        
        print(f"‚è±Ô∏è Waiting {timeout} seconds for marker detection...")
        
        self.marker_detected = False
        self.markers.clear()
        
        start_time = time.time()
        
        while (time.time() - start_time) < timeout:
            if self.marker_detected:
                print(f"‚úÖ Marker detected after {time.time() - start_time:.1f}s")
                break
            time.sleep(0.02)
        
        return self.marker_detected
    
    def start_continuous_detection(self, vision):
        try:
            self.stop_continuous_detection(vision)
            time.sleep(0.3)
            
            result = vision.sub_detect_info(name="marker", callback=self.on_detect_marker)
            if result:
                self.is_active = True
                print("‚úÖ Marker detection activated")
                return True
            else:
                print("‚ùå Failed to start marker detection")
                return False
        except Exception as e:
            print(f"‚ùå Error starting marker detection: {e}")
            return False
    
    def stop_continuous_detection(self, vision):
        try:
            self.is_active = False
            vision.unsub_detect_info(name="marker")
        except:
            pass
    
    def reset_detection(self):
        self.marker_detected = False
        self.markers.clear()

# ===== ToF Sensor Handler =====
class ToFSensorHandler:
    def __init__(self):
        self.CALIBRATION_SLOPE = 0.0894 
        self.CALIBRATION_Y_INTERCEPT = 3.8409
        self.WINDOW_SIZE = 5
        self.tof_buffer = []
        self.readings = []
        self.collecting_data = False
        
    def calibrate_tof_value(self, raw_tof_mm):
        calibrated_cm = (self.CALIBRATION_SLOPE * raw_tof_mm) + self.CALIBRATION_Y_INTERCEPT
        return calibrated_cm
    
    def apply_median_filter(self, data, window_size):
        if len(data) == 0:
            return 0.0 
        if len(data) < window_size:
            return data[-1] 
        else:
            filtered = median_filter(data[-window_size:], size=window_size)
            return filtered[-1]
    
    def tof_data_handler(self, sub_info):
        if not self.collecting_data:
            return
            
        raw_tof_mm = sub_info[0]
        
        if raw_tof_mm <= 0 or raw_tof_mm > 4000:
            return
            
        calibrated_tof_cm = self.calibrate_tof_value(raw_tof_mm)
        self.tof_buffer.append(calibrated_tof_cm)
        filtered_tof_cm = self.apply_median_filter(self.tof_buffer, self.WINDOW_SIZE)
        
        if len(self.tof_buffer) <= 20:
            self.readings.append(filtered_tof_cm)
    
    def start_scanning(self):
        self.tof_buffer.clear()
        self.readings.clear()
        self.collecting_data = True
        
    def stop_scanning(self, sensor):
        self.collecting_data = False
        try:
            sensor.unsub_distance()
        except:
            pass
    
    def get_average_distance(self):
        if len(self.readings) == 0:
            return 0.0
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        if len(self.readings) > 4:
            q1 = np.percentile(self.readings, 25)
            q3 = np.percentile(self.readings, 75)
            iqr = q3 - q1
            lower_bound = q1 - 1.5 * iqr
            upper_bound = q3 + 1.5 * iqr
            
            filtered_values = [x for x in self.readings if lower_bound <= x <= upper_bound]
            return np.mean(filtered_values) if filtered_values else np.mean(self.readings)
        
        return np.mean(self.readings)

# ===== Direction Helper Function =====
def get_direction_name(angle):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á"""
    direction_map = {
        0: "‡∏´‡∏ô‡πâ‡∏≤ (Front)",
        -90: "‡∏ã‡πâ‡∏≤‡∏¢ (Left)", 
        90: "‡∏Ç‡∏ß‡∏≤ (Right)"
    }
    return direction_map.get(angle, f"‡∏≠‡∏á‡∏®‡∏≤ {angle}")

def get_compass_direction(angle):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏¥‡∏®"""
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö gimbal yaw: 0¬∞ = ‡∏´‡∏ô‡πâ‡∏≤, -90¬∞ = ‡∏ã‡πâ‡∏≤‡∏¢, 90¬∞ = ‡∏Ç‡∏ß‡∏≤
    compass_map = {
        0: "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (N)",
        -90: "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (W)",
        90: "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (E)",
        180: "‡πÉ‡∏ï‡πâ (S)",
        -180: "‡πÉ‡∏ï‡πâ (S)"
    }
    return compass_map.get(angle, f"{angle}¬∞")

# ===== Main Scanning Function =====
def scan_for_markers_all_directions(gimbal, chassis, sensor, marker_handler, tof_handler):
    """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ marker ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏≠‡∏á‡∏®‡∏≤"""
    print(f"\nüîç === SCANNING FOR MARKERS WITH DIRECTION ANGLES ===")
    print(f"üîÑ NEW: Rotate first, then tilt for better stability!")
    
    # ‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠
    chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
    time.sleep(0.1)
    
    speed = 480
    pitch_angle = -20
    directions = ['front', 'left', 'right']
    yaw_angles = {'front': 0, 'left': -90, 'right': 90}
    
    all_results = {}
    
    for direction in directions:
        current_angle = yaw_angles[direction]
        direction_name = get_direction_name(current_angle)
        compass_dir = get_compass_direction(current_angle)
        
        print(f"\nüß≠ Scanning {direction_name} | Gimbal Yaw: {current_angle}¬∞ | Compass: {compass_dir}")
        print(f"   üéØ Target: {direction.upper()} direction")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏´‡∏°‡∏∏‡∏ô gimbal ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡πâ‡∏° (‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏Å‡πâ‡∏°‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
        print(f"   üîÑ Step 1: Rotating gimbal to {current_angle}¬∞...")
        gimbal.moveto(pitch=0, yaw=current_angle, 
                     pitch_speed=speed, yaw_speed=speed).wait_for_completed()
        time.sleep(0.2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
        print(f"      ‚úÖ Rotation complete")
        
        print(f"   üéØ Step 2: Tilting gimbal to {pitch_angle}¬∞...")
        gimbal.moveto(pitch=pitch_angle, yaw=current_angle, 
                     pitch_speed=speed, yaw_speed=speed).wait_for_completed()
        time.sleep(0.2)
        print(f"      ‚úÖ Tilt complete")
        
        # ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
        print("üìè Measuring distance...")
        tof_handler.start_scanning()
        sensor.sub_distance(freq=50, callback=tof_handler.tof_data_handler)
        time.sleep(0.1)
        tof_handler.stop_scanning(sensor)
        
        distance = tof_handler.get_average_distance()
        print(f"   üìê Distance: {distance:.2f}cm at {current_angle}¬∞")
        
        # ‡∏ï‡∏£‡∏ß‡∏à marker ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ ToF reading ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ distance > 0 ‡πÅ‡∏•‡∏∞ <= 40.0cm
        if distance > 0 and distance <= 40.0:
            print("‚úÖ Distance OK - Scanning for markers...")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô marker
            marker_handler.reset_detection()
            detected = marker_handler.wait_for_markers(timeout=1.0)
            
            if detected and marker_handler.markers:
                marker_ids = [m.id for m in marker_handler.markers]
                all_results[direction] = {
                    'angle': current_angle,
                    'direction_name': direction_name,
                    'compass_direction': compass_dir,
                    'marker_ids': marker_ids,
                    'distance': distance,
                    'timestamp': datetime.now().isoformat()
                }
                
                print(f"üéØ FOUND MARKERS: {marker_ids}")
                print(f"   üìç Direction: {direction_name} ({current_angle}¬∞)")
                print(f"   üìè Distance: {distance:.2f}cm")
                print(f"   üß≠ Compass: {compass_dir}")
                print(f"   ‚úÖ {direction.upper()} scan complete with markers")
            else:
                print(f"‚ùå No markers found at {direction_name} ({current_angle}¬∞)")
                all_results[direction] = None
                print(f"   ‚úÖ {direction.upper()} scan complete (no markers)")
        else:
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if distance <= 0:
                print(f"‚ùå Invalid ToF reading ({distance:.2f}cm) at {current_angle}¬∞ - Skipping marker detection")
                print(f"   ‚ö†Ô∏è Sensor may not be detecting properly or object too close/far")
            else:
                print(f"‚ùå Distance too far ({distance:.2f}cm > 40cm) at {current_angle}¬∞ - Skipping marker detection")
            
            all_results[direction] = None
            print(f"   ‚úÖ {direction.upper()} scan complete (distance issue)")
        
        time.sleep(0.1)
    
    print(f"   üîÑ Step 3: Returning gimbal to center (0¬∞, 0¬∞)...")
    gimbal.moveto(pitch=0, yaw=0, pitch_speed=speed, yaw_speed=speed).wait_for_completed()
    time.sleep(0.1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Å‡πâ‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    print(f"      ‚úÖ Center return complete")
    
    # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠
    chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0, timeout=0.1)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    print(f"\nüéØ === SCANNING COMPLETE ===")
    print(f"üìä Summary: {len([r for r in all_results.values() if r])} directions with markers found")
    
    return all_results

def print_detailed_results(results):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    print(f"\n" + "="*60)
    print(f"üéØ DETAILED MARKER DETECTION RESULTS")
    print(f"="*60)
    
    total_markers = 0
    found_directions = []
    
    for direction, result in results.items():
        if result:
            total_markers += len(result['marker_ids'])
            found_directions.append(result)
            
            print(f"\n‚úÖ {result['direction_name'].upper()}")
            print(f"   üß≠ Gimbal Angle: {result['angle']:+4d}¬∞")
            print(f"   üß≠ Compass Direction: {result['compass_direction']}")
            print(f"   üéØ Marker IDs: {result['marker_ids']}")
            print(f"   üìè Distance: {result['distance']:.2f}cm")
            print(f"   ‚è∞ Time: {result['timestamp'][11:19]}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            if result.get('extended_scan'):
                print(f"   üîÑ Extended Scan: Yes (found at different angle)")
                print(f"   üìç Scan Type: Enhanced scanning for better detection")
        else:
            angle = {'front': 0, 'left': -90, 'right': 90}[direction]
            dir_name = get_direction_name(angle)
            compass = get_compass_direction(angle)
            
            print(f"\n‚ùå {dir_name.upper()}")
            print(f"   üß≠ Gimbal Angle: {angle:+4d}¬∞")
            print(f"   üß≠ Compass Direction: {compass}")
            print(f"   üéØ Result: No markers detected")
    
    print(f"\n" + "="*60)
    print(f"üìä SUMMARY")
    print(f"="*60)
    print(f"üéØ Total markers found: {total_markers}")
    print(f"üìç Directions with markers: {len(found_directions)}/3")
    
    if found_directions:
        print(f"\nüß≠ MARKER LOCATIONS BY ANGLE:")
        for result in found_directions:
            marker_list = ', '.join([f"ID{mid}" for mid in result['marker_ids']])
            print(f"   {result['angle']:+4d}¬∞ ({result['compass_direction']}): {marker_list}")

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á
# -------------------------------
def detect_red(ep_camera, threshold_area=100, attempts=3):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
    ‡∏≠‡πà‡∏≤‡∏ô frame ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á (attempts) ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô queue empty
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True/False ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á
    """
    try:
        for _ in range(attempts):
            try:
                frame = ep_camera.read_cv2_image(strategy="newest", timeout=0.5)
                if frame is None:
                    continue
                    
                hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

                # ‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
                lower_red1 = np.array([0, 120, 70])
                upper_red1 = np.array([10, 255, 255])
                lower_red2 = np.array([170, 120, 70])
                upper_red2 = np.array([180, 255, 255])

                mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
                mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
                mask = mask1 | mask2

                contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                for cnt in contours:
                    if cv2.contourArea(cnt) > threshold_area:
                        return True
                        
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏ô frame ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                time.sleep(0.05)
                
            except Exception as e:
                print(f"‚ùå Error reading frame: {e}")
                time.sleep(0.1)
                
        return False
    except Exception as e:
        print(f"‚ùå detect_red error: {e}")
        return False

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á + marker
# -------------------------------
def scan_red_then_marker_fixed(ep_robot, ep_gimbal, ep_chassis, ep_sensor, marker_handler, tof_handler):
    """
    ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πÅ‡∏Å‡∏ô marker ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á
    """
    yaw_angles = [0, -90, 90]  # ‡∏´‡∏ô‡πâ‡∏≤, ‡∏ã‡πâ‡∏≤‡∏¢, ‡∏Ç‡∏ß‡∏≤
    red_angles = []

    ep_camera = ep_robot.camera
    
    # ‡πÄ‡∏õ‡∏¥‡∏î Video Stream ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    try:
        ep_camera.start_video_stream(display=False, resolution="720p")
        print("üìπ Starting camera stream...")
        time.sleep(1.0)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ frame ‡∏°‡∏≤‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    except Exception as e:
        print(f"‚ùå Error starting camera: {e}")
        return {}

    # ‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ chassis ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)

    print("\nüî¥ === SCANNING FOR RED COLOR ===")
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
    for yaw in yaw_angles:
        direction_name = get_direction_name(yaw)
        print(f"\nüîÑ ‡∏´‡∏°‡∏∏‡∏ô Gimbal ‡πÑ‡∏õ‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á")
        
        ep_gimbal.moveto(pitch=0, yaw=yaw, pitch_speed=480, yaw_speed=480).wait_for_completed()
        time.sleep(0.3)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
        
        found_red = detect_red(ep_camera, threshold_area=100, attempts=5)
        if found_red:
            print(f"‚úÖ ‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")
            red_angles.append(yaw)
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")

    # ‡∏õ‡∏¥‡∏î Video Stream ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    try:
        ep_camera.stop_video_stream()
    except:
        pass

    results = {}

    if not red_angles:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏î‡πÄ‡∏•‡∏¢")
        # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=480, yaw_speed=480).wait_for_completed()
        ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
        return results

    print(f"\nüéØ === SCANNING MARKERS (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á) ===")
    print(f"üî¥ ‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏ô {len(red_angles)} ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: {red_angles}")

    # scan marker ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ yaw ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏µ‡πÅ‡∏î‡∏á
    for yaw in red_angles:
        direction_name = get_direction_name(yaw)
        print(f"\nüéØ ‡∏™‡πÅ‡∏Å‡∏ô Marker ‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")
        
        # ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ yaw ‡∏ô‡∏±‡πâ‡∏ô
        ep_gimbal.moveto(pitch=-20, yaw=yaw, pitch_speed=480, yaw_speed=480).wait_for_completed()
        time.sleep(0.1)

        # ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏ß‡∏¢ ToF
        print("üìè ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á...")
        tof_handler.start_scanning()
        ep_sensor.sub_distance(freq=50, callback=tof_handler.tof_data_handler)
        time.sleep(0.25)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
        tof_handler.stop_scanning(ep_sensor)
        
        distance = tof_handler.get_average_distance()
        print(f"   üìê ‡∏£‡∏∞‡∏¢‡∏∞: {distance:.2f} cm")

        # ‡∏ï‡∏£‡∏ß‡∏à marker ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ ToF reading ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if distance > 0 and distance <= 50.0:
            print("‚úÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠ - ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Marker...")
            marker_handler.reset_detection()
            detected = marker_handler.wait_for_markers(timeout=1.5)
            
            if detected and marker_handler.markers:
                marker_ids = [m.id for m in marker_handler.markers]
                results[yaw] = {
                    'direction_name': direction_name,
                    'marker_ids': marker_ids,
                    'distance': distance,
                    'found_red': True
                }
                print(f"üéØ ‡πÄ‡∏à‡∏≠ Marker: {marker_ids} ‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")
            else:
                results[yaw] = {
                    'direction_name': direction_name,
                    'marker_ids': [],
                    'distance': distance,
                    'found_red': True
                }
                print(f"‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Marker ‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")
        else:
            results[yaw] = {
                'direction_name': direction_name,
                'marker_ids': [],
                'distance': distance,
                'found_red': True,
                'reason': 'distance_issue'
            }
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if distance <= 0:
                print(f"‚ùå ToF sensor ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ ({distance:.2f}cm) ‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")
                print(f"   ‚ö†Ô∏è ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏Å‡∏•‡πâ/‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
            else:
                print(f"‚ùå ‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({distance:.2f}cm > 50cm) ‡∏ó‡∏µ‡πà {direction_name} ({yaw}¬∞)")

    # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    print(f"\nüîÑ ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á...")
    ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=480, yaw_speed=480).wait_for_completed()
    
    # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠
    ep_chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0, timeout=0.1)

    return results

def print_red_scan_results(results):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á+marker"""
    print("\n" + "="*60)
    print("üî¥ RED COLOR + MARKER DETECTION RESULTS")
    print("="*60)
    
    if not results:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏î‡πÄ‡∏•‡∏¢")
        return
    
    total_markers = 0
    directions_with_markers = 0
    
    for yaw, info in results.items():
        if info:
            direction_name = info['direction_name']
            marker_ids = info['marker_ids']
            distance = info['distance']
            
            print(f"\n‚úÖ {direction_name.upper()} ({yaw:+4d}¬∞)")
            print(f"   üî¥ ‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á: ‡πÉ‡∏ä‡πà")
            print(f"   üìè ‡∏£‡∏∞‡∏¢‡∏∞: {distance:.2f} cm")
            
            if marker_ids:
                print(f"   üéØ Marker IDs: {marker_ids}")
                total_markers += len(marker_ids)
                directions_with_markers += 1
            else:
                reason = info.get('reason', 'not_found')
                if reason == 'distance_issue':
                    if distance <= 0:
                        print(f"   üéØ Marker: ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à (ToF sensor ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)")
                    else:
                        print(f"   üéØ Marker: ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à (‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)")
                else:
                    print(f"   üéØ Marker: ‡πÑ‡∏°‡πà‡∏û‡∏ö")
    
    print(f"\n" + "="*60)
    print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô")
    print(f"="*60)
    print(f"üî¥ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á: {len(results)}")
    print(f"üéØ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö Marker: {directions_with_markers}")
    print(f"üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_markers}")

if __name__ == "__main__":
    print("ü§ñ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå...")
    ep_robot = robot.Robot()
    
    try:
        ep_robot.initialize(conn_type="ap")
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        exit(1)

    ep_gimbal = ep_robot.gimbal
    ep_chassis = ep_robot.chassis
    ep_sensor = ep_robot.sensor
    ep_vision = ep_robot.vision

    marker_handler = MarkerVisionHandler()
    tof_handler = ToFSensorHandler()

    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° marker detection
        if not marker_handler.start_continuous_detection(ep_vision):
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° marker detection ‡πÑ‡∏î‡πâ")
            exit(1)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞ marker
        print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞ Marker...")
        results = scan_red_then_marker_fixed(ep_robot, ep_gimbal, ep_chassis, ep_sensor, marker_handler, tof_handler)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print_red_scan_results(results)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        try:
            marker_handler.stop_continuous_detection(ep_vision)
            ep_robot.close()
            print("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        except:
            pass