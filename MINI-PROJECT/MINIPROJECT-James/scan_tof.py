import time
import robomaster
from robomaster import robot
import numpy as np
from scipy.ndimage import median_filter
from datetime import datetime

class ToFSensorHandler:
    def __init__(self):
        # ‡∏Ñ‡πà‡∏≤ Calibration ‡∏à‡∏≤‡∏Å Linear Regression
        self.CALIBRATION_SLOPE = 0.0894 
        self.CALIBRATION_Y_INTERCEPT = 3.8409
        
        # Median Filter settings
        self.WINDOW_SIZE = 5
        self.tof_buffer = []
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        self.readings = {
            'left_90': [],
            'right_minus90': []
        }
        
        self.current_position = None
        self.collecting_data = False
        
    def calibrate_tof_value(self, raw_tof_mm):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ToF ‡∏î‡∏¥‡∏ö (mm) ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß (cm)"""
        calibrated_cm = (self.CALIBRATION_SLOPE * raw_tof_mm) + self.CALIBRATION_Y_INTERCEPT
        return calibrated_cm
    
    def apply_median_filter(self, data, window_size):
        """‡πÉ‡∏ä‡πâ Median Filter ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if len(data) == 0:
            return 0.0 
        if len(data) < window_size:
            return data[-1] 
        else:
            filtered = median_filter(data[-window_size:], size=window_size)
            return filtered[-1]
    
    def tof_data_handler(self, sub_info):
        """Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ToF"""
        if not self.collecting_data:
            return
            
        raw_tof_mm = sub_info[0]  # ‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (mm)
        
        # Calibrate ‡∏Ñ‡πà‡∏≤
        calibrated_tof_cm = self.calibrate_tof_value(raw_tof_mm)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á buffer
        self.tof_buffer.append(calibrated_tof_cm)
        
        # ‡πÉ‡∏ä‡πâ Median Filter
        filtered_tof_cm = self.apply_median_filter(self.tof_buffer, self.WINDOW_SIZE)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if self.current_position and len(self.tof_buffer) <= 25:  # ‡πÄ‡∏Å‡πá‡∏ö 25 ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà 25Hz)
            self.readings[self.current_position].append({
                'raw_mm': raw_tof_mm,
                'calibrated_cm': calibrated_tof_cm,
                'filtered_cm': filtered_tof_cm,
                'timestamp': datetime.now().isoformat()
            })
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö real-time
        print(f"[{self.current_position}] Raw: {raw_tof_mm:.1f}mm | "
              f"Calibrated: {calibrated_tof_cm:.2f}cm | "
              f"Filtered: {filtered_tof_cm:.2f}cm")
    
    def start_data_collection(self, position):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        self.current_position = position
        self.tof_buffer.clear()
        self.collecting_data = True
        
    def stop_data_collection(self, unsub_distance_func):
        """‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        self.collecting_data = False
        self.current_position = None
        unsub_distance_func()
    
    def get_summary_stats(self, position):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        if position not in self.readings or len(self.readings[position]) == 0:
            return None
            
        data = self.readings[position]
        filtered_values = [reading['filtered_cm'] for reading in data]
        
        return {
            'count': len(filtered_values),
            'mean': np.mean(filtered_values),
            'median': np.median(filtered_values),
            'std': np.std(filtered_values),
            'min': np.min(filtered_values),
            'max': np.max(filtered_values)
        }

def simple_movement_sequence_with_tof(gimbal, chassis, sensor, tof_handler):
    """‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF (‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)"""
    print("\n=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF ===")
    
    # ‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠
    print("üîí ‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á 4 ‡∏•‡πâ‡∏≠...")
    chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0)
    time.sleep(0.5)
    
    speed = 540
    
    # 1. ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF
    print("1. ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ 90¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF...")
    gimbal.moveto(pitch=0, yaw=90, pitch_speed=speed, yaw_speed=speed).wait_for_completed()
    time.sleep(0.2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏¥‡πà‡∏á
    
    print("üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á 90¬∞...")
    tof_handler.start_data_collection('left_90')
    sensor.sub_distance(freq=25, callback=tof_handler.tof_data_handler)
    time.sleep(0.4) 
    tof_handler.stop_data_collection(sensor.unsub_distance)
    print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà 90¬∞")
    
    # 2. ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ -90¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF
    print("2. ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ -90¬∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF...")
    gimbal.moveto(pitch=0, yaw=-90, pitch_speed=speed, yaw_speed=speed).wait_for_completed()
    time.sleep(0.2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏¥‡πà‡∏á
    
    print("üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ToF ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á -90¬∞...")
    tof_handler.start_data_collection('right_minus90')
    sensor.sub_distance(freq=25, callback=tof_handler.tof_data_handler)
    time.sleep(0.4) 
    tof_handler.stop_data_collection(sensor.unsub_distance)
    print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà -90¬∞")
    
    # 3. ‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    print("3. ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    gimbal.moveto(pitch=0, yaw=0, pitch_speed=speed, yaw_speed=speed).wait_for_completed()
    time.sleep(0.2)
    
    # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠
    print("üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏•‡πâ‡∏≠...")
    chassis.drive_wheels(w1=0, w2=0, w3=0, w4=0, timeout=0.1)
    time.sleep(0.2)
    
if __name__ == '__main__':
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå...")
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    
    ep_gimbal = ep_robot.gimbal
    ep_chassis = ep_robot.chassis
    ep_sensor = ep_robot.sensor
    
    tof_handler = ToFSensorHandler()
    
    try:
        print("‚úÖ Recalibrating gimbal...")
        ep_gimbal.recenter(pitch_speed=100, yaw_speed=100).wait_for_completed()
        print("‚úÖ Gimbal recalibrated.")
        
        print("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
        ep_gimbal.moveto(pitch=0, yaw=0, pitch_speed=50, yaw_speed=50).wait_for_completed()
        time.sleep(1)
        
        print(f"üéØ ‡πÉ‡∏ä‡πâ Calibration: slope={tof_handler.CALIBRATION_SLOPE}, intercept={tof_handler.CALIBRATION_Y_INTERCEPT}")
        print(f"üîç ‡πÉ‡∏ä‡πâ Median Filter: window size={tof_handler.WINDOW_SIZE}")
        
        simple_movement_sequence_with_tof(ep_gimbal, ep_chassis, ep_sensor, tof_handler)
            
    except KeyboardInterrupt:
        print("\n‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            ep_sensor.unsub_distance()
        except:
            pass
        ep_robot.close()
        print("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")