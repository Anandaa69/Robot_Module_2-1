# -*-coding:utf-8-*-
# Copyright (c) 2020 DJI.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# BEST 25hz sensor distance + 10cm use median_filter window = 5

import robomaster
from robomaster import robot
import csv
from datetime import datetime
import time
import numpy as np
import math
from scipy.ndimage import median_filter
from scipy.signal import butter, filtfilt

# --- CONFIG ---
file_name = 'tof_calibrated_data.csv' # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
FILTER_MODE = "median_filter"            # raw, moving_average, median_filter, low_pass
WINDOW_SIZE = 5                     # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Moving Average ‡πÅ‡∏•‡∏∞ Median

# --- ‡∏Ñ‡πà‡∏≤ Calibration Factors ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Linear Regression ---
# ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á = (0.0894 * ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå) + (3.8409)
# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (raw_tof) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å RoboMaster EP ToF ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡πÄ‡∏°‡∏ï‡∏£ (mm)
# ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ calibrated_tof ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£ (cm), 
# ‡∏Ñ‡πà‡∏≤ Slope (0.0894) ‡πÅ‡∏•‡∏∞ Y-intercept (3.8409) ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å mm -> cm
# ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ calibrated_tof ‡πÄ‡∏õ‡πá‡∏ô mm, ‡∏Ñ‡πà‡∏≤ Slope ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô mm/mm ‡πÅ‡∏•‡∏∞ Y-intercept ‡πÄ‡∏õ‡πá‡∏ô mm
# **‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå calibrated_tof ‡πÄ‡∏õ‡πá‡∏ô cm:**
# ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏´‡πâ‡∏°‡∏≤ (sensor_readings ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏î‡∏¥‡∏ö 170-1062, actual_distances ‡πÄ‡∏õ‡πá‡∏ô cm 20-100)
# ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô Slope 0.0894 ‡∏Ñ‡∏∑‡∏≠ cm/raw_unit ‡πÅ‡∏•‡∏∞ Y-intercept 3.8409 ‡∏Ñ‡∏∑‡∏≠ cm
CALIBRATION_SLOPE = 0.0894 
CALIBRATION_Y_INTERCEPT = 3.8409 

# STOP_THRESHOLD ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà "‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß" ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö calibrated_tof
# ‡∏ñ‡πâ‡∏≤ calibrated_tof ‡πÄ‡∏õ‡πá‡∏ô cm, STOP_THRESHOLD ‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô cm
# ‡∏ñ‡πâ‡∏≤ calibrated_tof ‡πÄ‡∏õ‡πá‡∏ô mm, STOP_THRESHOLD ‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô mm
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà 40 cm (‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå)
STOP_THRESHOLD = 50 # cm (‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö calibrated_tof)
# ‡∏ñ‡πâ‡∏≤ 400.0 ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á 400 mm (40 cm) ‡πÅ‡∏•‡∏∞ chod ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏ä‡∏î‡πÄ‡∏ä‡∏¢
# ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ chod ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß
# ‡πÅ‡∏•‡∏∞ STOP_THRESHOLD ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏¢‡∏∏‡∏î
# ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà 40 cm ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 40.0

SPEED = 0.25                  # m/s
DURATION = 30                 # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
SAMPLING_FREQ = 25            # Hz ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LPF
CUTOFF_FREQ = 1.0             # Hz ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LPF
# -----------------

# --- GLOBALS ---
csv_writer = None
csv_file = None
tof_buffer = []
latest_filtered_tof = None
t_detect = None
t_stop_command = None
t_start = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
lpf_filter = None  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Low-Pass Filter instance

# === Calibration Function ===

def calibrate_tof_value(raw_tof_value_from_sensor):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ToF ‡∏î‡∏¥‡∏ö (‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå, ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡πÄ‡∏°‡∏ï‡∏£) 
    ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£ Linear Regression.
    
    Args:
        raw_tof_value_from_sensor (float): ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ToF (‡∏à‡∏≤‡∏Å SDK ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡πÄ‡∏°‡∏ï‡∏£).

    Returns:
        float: ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö, ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ cm).
    """
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Slope ‡πÅ‡∏•‡∏∞ Y-intercept ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
    calibrated_value = (CALIBRATION_SLOPE * raw_tof_value_from_sensor) + CALIBRATION_Y_INTERCEPT
    return calibrated_value

# === Low-Pass Filter Class ===

class LowPassFilter:
    def __init__(self, cutoff_freq, sample_rate):
        self.dt = 1.0 / sample_rate
        self.alpha = (2 * math.pi * cutoff_freq * self.dt) / (2 * math.pi * cutoff_freq * self.dt + 1)
        self.last_output = None
    
    def filter(self, new_value):
        if self.last_output is None:
            self.last_output = new_value
        else:
            self.last_output = self.alpha * new_value + (1 - self.alpha) * self.last_output
        return self.last_output

# === Filter Functions ===

def moving_average(data, window_size):
    if len(data) == 0:
        return 0.0 
    if len(data) < window_size:
        return sum(data) / len(data)
    else:
        return sum(data[-window_size:]) / window_size

def apply_median_filter(data, window_size):
    if len(data) == 0:
        return 0.0 
    if len(data) < window_size:
        return data[-1] 
    else:
        filtered = median_filter(data[-window_size:], size=window_size)
        return filtered[-1]

def butterworth_lpf(cutoff_freq, sampling_freq, order=4): # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    nyquist = sampling_freq / 2
    normal_cutoff = cutoff_freq / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return b, a

def apply_lpf(data):
    """Simple Low-Pass Filter using LowPassFilter class"""
    global lpf_filter
    if lpf_filter is None:
        lpf_filter = LowPassFilter(CUTOFF_FREQ, SAMPLING_FREQ)
    
    return lpf_filter.filter(data[-1])

# === Filtering Handler ===

def filter_tof(calibrated_value):
    tof_buffer.append(calibrated_value)
    if FILTER_MODE == "moving_average":
        return moving_average(tof_buffer, WINDOW_SIZE)
    elif FILTER_MODE == "median_filter":
        return apply_median_filter(tof_buffer, WINDOW_SIZE)
    elif FILTER_MODE == "low_pass":
        return apply_lpf(tof_buffer)
    else:
        return calibrated_value 

# === CSV Logging ===

def write_tof_data_to_csv(raw_tof, calibrated_tof, filtered_tof, timestamp_iso): # ‡πÄ‡∏û‡∏¥‡πà‡∏° calibrated_tof
    global csv_writer
    if csv_writer:
        csv_writer.writerow([
            timestamp_iso,
            raw_tof,
            calibrated_tof, 
            filtered_tof,
            t_detect,
            t_stop_command,
            t_stop_command - t_detect if t_detect and t_stop_command else None,
            t_detect - t_start if t_detect and t_start else None
        ])

# === Callback ===

def tof_data_handler(sub_info):
    global latest_filtered_tof, t_detect, t_stop_command

    # sub_info[0] ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ToF ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡πÄ‡∏°‡∏ï‡∏£)
    raw_tof_mm = sub_info[0] 

    # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ raw_tof_mm ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô calibrated_tof_cm (‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
    calibrated_tof_cm = calibrate_tof_value(raw_tof_mm) 
    
    # ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≠
    filtered_tof_cm = filter_tof(calibrated_tof_cm) 
    latest_filtered_tof = filtered_tof_cm

    timestamp_iso = datetime.now().isoformat()
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á raw, calibrated, ‡πÅ‡∏•‡∏∞ filtered
    print(f"Raw: {raw_tof_mm:.2f}mm | Calibrated: {calibrated_tof_cm:.2f}cm | Filtered: {filtered_tof_cm:.2f}cm")

    write_tof_data_to_csv(raw_tof_mm, calibrated_tof_cm, filtered_tof_cm, timestamp_iso) 

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
    # ‡∏ó‡∏±‡πâ‡∏á filtered_tof_cm ‡πÅ‡∏•‡∏∞ STOP_THRESHOLD ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô cm
    if filtered_tof_cm <= STOP_THRESHOLD and t_detect is None:
        t_detect = time.time()
        ep_chassis.drive_speed(x=0.0, y=0, z=0,timeout=0.75)
        t_stop_command = time.time()
        
        response_time = t_stop_command - t_detect
        total_time = t_detect - t_start if t_start else 0
        
        print(f"üõë Object detected! Filtered TOF: {filtered_tof_cm:.2f} cm")
        print(f"‚è±Ô∏è Detection time: {t_detect:.4f} sec")
        print(f"üöÄ Stop command time: {t_stop_command:.4f} sec")
        print(f"‚è≥ Response time = {response_time:.4f} sec")
        print(f"üïê Total time from start = {total_time:.4f} sec")

# === Main Script ===

if __name__ == "__main__":
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap") # ‡∏´‡∏£‡∏∑‡∏≠ "sta" ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    ep_sensor = ep_robot.sensor
    ep_chassis = ep_robot.chassis
    ep_gimbal = ep_robot.gimbal

    print("‚úÖ Recalibrating gimbal...")
    ep_gimbal.recenter(pitch_speed=100, yaw_speed=100).wait_for_completed()
    print("‚úÖ Gimbal recalibrated.")

    try:
        csv_file = open(f"J.Sahapong/lab4/data/{file_name}", "w", newline="")
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow([
            "timestamp_iso",
            "raw_tof_mm", # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            "calibrated_tof_cm", # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            "filtered_tof_cm", # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            "t_detect",
            "t_stop_command",
            "response_time",
            "total_time_from_start"
        ])
    except IOError as e:
        print(f"Error opening CSV file: {e}")
        ep_robot.close()
        exit()

    print("‚úÖ Start robot movement and ToF sensing...")
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á STOP_THRESHOLD: ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ cm
    print(f"üéØ Stop threshold: {STOP_THRESHOLD:.1f} cm") 
    print(f"üöÄ Speed: {SPEED} m/s")
    print(f"üîç Filter mode: {FILTER_MODE}")
    
    if FILTER_MODE == "low_pass":
        lpf_filter = LowPassFilter(CUTOFF_FREQ, SAMPLING_FREQ)
        print(f"üìä Low-Pass Filter: fc={CUTOFF_FREQ}Hz, fs={SAMPLING_FREQ}Hz, alpha={lpf_filter.alpha:.4f}")
    
    t_start = time.time()
    ep_chassis.drive_speed(x=SPEED, y=0, z=0)
    ep_sensor.sub_distance(freq=SAMPLING_FREQ, callback=tof_data_handler)

    time.sleep(DURATION)

    print("‚èπ Stopping...")
    ep_sensor.unsub_distance()
    ep_chassis.drive_speed(x=0, y=0, z=0)
    ep_robot.close()

    if csv_file:
        csv_file.close()
        print("üíæ Data saved. Robot stopped.")